"""
Script principal del Proyecto Phoenix - Fase I Completa.

Demuestra la integraci√≥n completa del conector del exchange, motor de an√°lisis t√©cnico
y la l√≥gica de se√±ales de trading seg√∫n las especificaciones del documento "Proyecto Phoenix".
"""

import asyncio
import logging

from utils.config_manager import ConfigManager
from utils.logger import setup_logging
from core.exchange_connector import ExchangeConnector
from core.analysis_engine import TechnicalAnalysisEngine
from core.trading_signals import TradingSignalsEngine, SignalType
from utils.exceptions import PhoenixError


async def main():
    """
    Funci√≥n principal que demuestra la integraci√≥n completa de la Fase I.
    Pipeline: Exchange ‚Üí An√°lisis T√©cnico ‚Üí Se√±ales de Trading
    """
    try:
        # Inicializar configuraci√≥n
        config = ConfigManager()
        
        # Configurar logging
        logger = setup_logging(config)
        logger.info("=== PROYECTO PHOENIX - FASE I: N√öCLEO DE AN√ÅLISIS COMPLETO ===")
        logger.info("Iniciando pipeline completo: Conector ‚Üí An√°lisis ‚Üí Se√±ales...")
        
        # === PASO 1: CONECTOR DEL EXCHANGE ===
        logger.info("--- PASO 1: INICIALIZANDO CONECTOR DEL EXCHANGE ---")
        connector = ExchangeConnector(config)
        
        # Probar conexi√≥n
        if not connector.test_connection():
            logger.error("No se pudo establecer conexi√≥n con el exchange")
            return
        
        # Obtener informaci√≥n del exchange
        exchange_info = connector.get_exchange_info()
        logger.info(f"Exchange conectado: {exchange_info['name']} ({exchange_info['id']})")
        
        # Obtener par√°metros de configuraci√≥n
        symbol = config.get_trading_pair()
        timeframe = config.get_timeframe()
        limit = config.get_data_limit()
        
        logger.info(f"Obteniendo datos OHLCV para {symbol} en {timeframe}")
        
        # Obtener y validar datos OHLCV
        ohlcv_df = connector.fetch_ohlcv_data(symbol, timeframe, limit)
        
        logger.info("=== DATOS OHLCV OBTENIDOS ===")
        logger.info(f"Filas obtenidas: {len(ohlcv_df)}")
        logger.info(f"Rango temporal: {ohlcv_df.index[0]} a {ohlcv_df.index[-1]}")
        logger.info(f"Precio actual (√∫ltimo cierre): {ohlcv_df['close'].iloc[-1]:.2f}")
        
        # === PASO 2: MOTOR DE AN√ÅLISIS T√âCNICO ===
        logger.info("--- PASO 2: INICIALIZANDO MOTOR DE AN√ÅLISIS T√âCNICO ---")
        analysis_engine = TechnicalAnalysisEngine(config)
        
        # Mostrar configuraci√≥n del motor
        analysis_config = analysis_engine.get_configuration_summary()
        logger.info(f"Configuraci√≥n del motor: {analysis_config}")
        
        # Enriquecer DataFrame con indicadores t√©cnicos
        logger.info("Calculando indicadores t√©cnicos...")
        enriched_df = analysis_engine.enrich_dataframe(ohlcv_df)
        
        logger.info("=== DATAFRAME ENRIQUECIDO CON INDICADORES ===")
        logger.info(f"Columnas totales: {len(enriched_df.columns)}")
        logger.info(f"Indicadores a√±adidos: {analysis_engine._get_indicator_columns()}")
        
        # === PASO 3: L√ìGICA DE SE√ëALES DE TRADING ===
        logger.info("--- PASO 3: INICIALIZANDO MOTOR DE SE√ëALES DE TRADING ---")
        signals_engine = TradingSignalsEngine()
        
        logger.info("Analizando se√±ales de trading con l√≥gica stateful...")
        signals_result = signals_engine.analyze_signals(enriched_df)
        
        # === RESULTADOS DEL AN√ÅLISIS DE SE√ëALES ===
        logger.info("=== AN√ÅLISIS DE SE√ëALES COMPLETADO ===")
        signal_type = signals_result['signal_type']
        
        # Generar explicaci√≥n detallada
        signal_explanation = signals_engine.get_signal_explanation(signals_result)
        logger.info("=== RESULTADO DE LA DETECCI√ìN DE SE√ëALES ===")
        logger.info(f"\n{signal_explanation}")
        
        # === DETALLES T√âCNICOS DE LA SE√ëAL ===
        logger.info("=== DETALLES T√âCNICOS DEL AN√ÅLISIS ===")
        
        if signal_type == SignalType.BULLISH_SIGNAL:
            logger.info("üü¢ SE√ëAL ALCISTA DETECTADA")
            bullish_details = signals_result['bullish_analysis']
            logger.info("Condiciones actuales cumplidas:")
            for condition, met in bullish_details['current_conditions'].items():
                status = "‚úÖ" if met else "‚ùå"
                logger.info(f"  {status} {condition}")
            
            logger.info("Transici√≥n detectada: Las condiciones pasaron de NO cumplidas a S√ç cumplidas")
            
        elif signal_type == SignalType.BEARISH_SIGNAL:
            logger.info("üî¥ SE√ëAL BAJISTA DETECTADA")
            bearish_details = signals_result['bearish_analysis']
            logger.info("Condiciones actuales cumplidas:")
            for condition, met in bearish_details['current_conditions'].items():
                status = "‚úÖ" if met else "‚ùå"
                logger.info(f"  {status} {condition}")
            
            logger.info("Transici√≥n detectada: Las condiciones pasaron de NO cumplidas a S√ç cumplidas")
            
        else:
            logger.info("‚ö™ SIN SE√ëAL RELEVANTE EN EL CICLO ACTUAL")
            logger.info("Raz√≥n: No se detect√≥ transici√≥n de estado en las condiciones de entrada")
            
            # Mostrar estado actual de condiciones alcistas
            bullish_details = signals_result['bullish_analysis']
            logger.info("Estado actual de condiciones alcistas:")
            for condition, met in bullish_details['current_conditions'].items():
                status = "‚úÖ" if met else "‚ùå"
                logger.info(f"  {status} {condition}")
            
            # Mostrar estado actual de condiciones bajistas
            bearish_details = signals_result['bearish_analysis']
            logger.info("Estado actual de condiciones bajistas:")
            for condition, met in bearish_details['current_conditions'].items():
                status = "‚úÖ" if met else "‚ùå"
                logger.info(f"  {status} {condition}")
        
        # === VALORES DE INDICADORES ACTUALES ===
        logger.info("=== VALORES DE INDICADORES EN VELA ACTUAL ===")
        market_conditions = signals_result['market_conditions']
        logger.info(f"Timestamp: {signals_result['timestamp']}")
        logger.info(f"Precio actual: ${market_conditions['current_price']:,.2f}")
        logger.info(f"EMA21: ${market_conditions['ema21_value']:,.2f} ({market_conditions['price_vs_ema']})")
        logger.info(f"RSI14: {market_conditions['rsi_value']:.2f} ({market_conditions['rsi_zone']})")
        logger.info(f"MACD Histograma: {market_conditions['macd_histogram']:+.4f} ({market_conditions['macd_momentum']})")
        logger.info(f"Volumen: {market_conditions['volume_ratio']:.2f}x promedio ({market_conditions['volume_status']})")
        
        # === COMPARACI√ìN ENTRE VELAS (DETECCI√ìN DE TRANSICI√ìN) ===
        logger.info("=== AN√ÅLISIS DE TRANSICI√ìN ENTRE VELAS ===")
        
        if signal_type != SignalType.NO_SIGNAL:
            # Hay se√±al - mostrar la transici√≥n
            if signal_type == SignalType.BULLISH_SIGNAL:
                details = signals_result['bullish_analysis']
                logger.info("Transici√≥n Alcista Detectada:")
            else:
                details = signals_result['bearish_analysis']
                logger.info("Transici√≥n Bajista Detectada:")
            
            logger.info(f"Vela anterior: Condiciones NO cumplidas ({not details['all_previous_met']})")
            logger.info(f"Vela actual: Condiciones S√ç cumplidas ({details['all_current_met']})")
            logger.info("‚úÖ EVENTO DE TRANSICI√ìN CONFIRMADO")
        else:
            logger.info("No se detect√≥ transici√≥n v√°lida:")
            logger.info("‚Ä¢ Las condiciones pueden estar cumplidas en ambas velas (sin evento)")
            logger.info("‚Ä¢ O las condiciones no est√°n completamente cumplidas en la vela actual")
            logger.info("‚Ä¢ La l√≥gica stateful evita alertas redundantes")
        
        # === ESTADO FINAL DEL SISTEMA ===
        logger.info("=== FASE I - N√öCLEO DE AN√ÅLISIS: COMPLETADO EXITOSAMENTE ===")
        logger.info("‚úÖ Conector del Exchange: OPERATIVO")
        logger.info("‚úÖ Motor de An√°lisis T√©cnico: OPERATIVO")
        logger.info("‚úÖ Motor de Se√±ales de Trading: OPERATIVO")
        logger.info("‚úÖ L√≥gica Stateful: Diferenciaci√≥n entre estado y evento implementada")
        logger.info(f"üéØ Resultado final del ciclo: {signal_type.value}")
        logger.info("üöÄ Sistema listo para la siguiente fase: Interfaz de Usuario y Bot de Telegram")
        
    except PhoenixError as e:
        logger.error(f"Error del Proyecto Phoenix: {str(e)}")
    except Exception as e:
        logger.error(f"Error inesperado: {str(e)}", exc_info=True)


if __name__ == "__main__":
    asyncio.run(main())
